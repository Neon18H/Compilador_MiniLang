
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EQUALS ID MINUS NUMBER PLUS PRINT SEMICOLON TIMESprogram : instructionsinstructions : instructions instruction\n                    | instructioninstruction : ID EQUALS expression SEMICOLONinstruction : PRINT ID SEMICOLONexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factorterm : factorfactor : NUMBERfactor : ID'
    
_lr_action_items = {'ID':([0,2,3,5,6,7,14,15,16,17,18,19,],[4,4,-3,8,-2,9,-5,-4,9,9,9,9,]),'PRINT':([0,2,3,6,14,15,],[5,5,-3,-2,-5,-4,]),'$end':([1,2,3,6,14,15,],[0,-1,-3,-2,-5,-4,]),'EQUALS':([4,],[7,]),'NUMBER':([7,16,17,18,19,],[13,13,13,13,13,]),'SEMICOLON':([8,9,10,11,12,13,20,21,22,23,],[14,-13,15,-8,-11,-12,-6,-7,-9,-10,]),'TIMES':([9,11,12,13,20,21,22,23,],[-13,18,-11,-12,18,18,-9,-10,]),'DIVIDE':([9,11,12,13,20,21,22,23,],[-13,19,-11,-12,19,19,-9,-10,]),'PLUS':([9,10,11,12,13,20,21,22,23,],[-13,16,-8,-11,-12,-6,-7,-9,-10,]),'MINUS':([9,10,11,12,13,20,21,22,23,],[-13,17,-8,-11,-12,-6,-7,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,],[2,]),'instruction':([0,2,],[3,6,]),'expression':([7,],[10,]),'term':([7,16,17,],[11,20,21,]),'factor':([7,16,17,18,19,],[12,12,12,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser.py',5),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','parser.py',9),
  ('instructions -> instruction','instructions',1,'p_instructions','parser.py',10),
  ('instruction -> ID EQUALS expression SEMICOLON','instruction',4,'p_instruction_assign','parser.py',17),
  ('instruction -> PRINT ID SEMICOLON','instruction',3,'p_instruction_print','parser.py',21),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','parser.py',25),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> term','expression',1,'p_expression_term','parser.py',30),
  ('term -> term TIMES factor','term',3,'p_term_binop','parser.py',34),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','parser.py',35),
  ('term -> factor','term',1,'p_term_factor','parser.py',39),
  ('factor -> NUMBER','factor',1,'p_factor_number','parser.py',43),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',47),
]
